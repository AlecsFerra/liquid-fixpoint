// global
measure prop :: func(2, [@(0), @(1)])   // a -> b

// datatype Peano ... from 'data Even'
data Peano 0 = [
  | Z {           }
  | S { _ : Peano }
]

// datatype Ev ... from 'relation Ev'
data Ev 0 = [
  | Ev { _ : Peano }
]

// datatype Even ... from 'data Even'
data Even 0 = [
  | EZ  { }
  | ESS { _ : Peano, _ : Even }
]

bind 0 n : {n:Peano | true}
bind 1 p : {p:Even  | prop p = Ev (S (S n)) && prop p = Ev Z}
bind 2 m : {m:Peano | true}
bind 3 q : {q:Even  | prop q = Ev m }
bind 4 p : {p:Even  | prop p = Ev (S (S n)) /\ prop p = Ev (S (S m))}

// test-case-EZ
constraint:
  env [0; 1]
  lhs {v:Even | true}
  rhs {v:Even | prop v = Ev n}
  id 1 tag []

// test-case-ESS
constraint:
  env [0; 2; 3; 4]
  lhs {v:int | v = q}
  rhs {v:int | prop v = Ev n}
  id 2 tag []
